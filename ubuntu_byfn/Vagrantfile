# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  #change to 20 minutes
  config.vm.boot_timeout = 15000
  
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
 
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
     vb.gui = true
  #Customize vm name
      vb.name = "Fabric_Samples_BYFN_GUI_Box"
      
  #   # Customize the amount of memory on the VM:
     vb.memory = "2048"
     vb.cpus = 2
     vb.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get -y upgrade
     apt-get -y install apt-transport-https ca-certificates curl software-properties-common
     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
     apt-key fingerprint 0EBFCD88 
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>Configure golang 1.8.3 start >>>>>>>>>>>>>>>>>>>>"
     # download go 1.8.3
     #wget -q https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz
     #tar -xvf go1.8.3.linux-amd64.tar.gz
     #cp -R  go /usr/local
     apt install golang-go -y
     #GO VARIABLES
     export GOROOT=/usr/local/go
     export GOPATH=/home/ubuntu/go
     export PATH=$PATH:$GOPATH/bin:$GOROOT/bin
     echo "export GOROOT=/usr/local/go"   >>  /etc/profile
     echo "export GOPATH=/home/ubuntu/go" >> /etc/profile
     echo "export PATH=$PATH:$GOPATH/bin:$GOROOT/go/bin" >> /etc/profile
     echo $GOPATH
     mkdir -p $GOPATH/src/github.com/hyperledger
     #END GO VARIABLES
     go version
     go env
     echo "<<<<<<<<<<<<<<<<<<<<<<Configure golang 1.8.3 end<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
     echo ">>>>>>>>>>>>>>>>>>>>>>Start to install Node.js v6.x:>>>>>>>>>>>>>>>>>>>>>>>>>"
     curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
     apt-get install -y nodejs
     npm install npm@3.10.10 -g
     echo ">>>>>>>>>>>>>>>>>>>>>>Start to configure Docker CE>>>>>>>>>>>>>>>>>>>>>>>>>>>"
     # Install packages to allow apt to use a repository over HTTPS
     apt-get install -y apt-transport-https ca-certificates curl software-properties-common
     # Add Dockerâ€™s official GPG key
     curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
     # apt-key fingerprint 0EBFCD88
     sudo add-apt-repository  "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
     apt-get update
     apt-get install docker-ce
     groupadd docker
     usermod -aG docker $USER
     usermod -aG docker ubuntu
     systemctl enable docker
     docker version
     #curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
     #chmod +x /usr/local/bin/docker-compose
     echo ">>>>>>>>>>>>>>>>>>>>>>Start to configure Docker Compose using python pip>>>>>>"
     apt-get install python-pip -y
     yes | pip install docker-compose
     docker-compose --version
     apt-get install  libtool libltdl-dev -y
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>Start to download Bring Your First Network>>>>>>>>>>>"
     git clone https://github.com/hyperledger/fabric-samples
     cd $GOPATH/src
     mkdir -p github.com/hyperledger
     cd github.com/hyperledger
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>Start to download Fabric source code>>>>>>>>>>>>>>>>>"
     git clone https://github.com/hyperledger/fabric.git
     cd fabric
     apt-get -y make
     chmod -R 777 /usr/local/go/
     chmod -R 777 /usr/local/go/blog/template/
     chmod -R 777 /usr/local/go/pkg/linux_amd64/github.com/hyperledger/fabric/
     make configtxgen
     cd examples
     cd e2e_cli
     chmod +x download-dockerimages.sh
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>Start to download docker images>>>>>>>>>>>>>>>>>>>>>>"
     ./download-dockerimages.sh
     chown -R ubuntu $GOPATH
     cp -r  $GOPATH/src/github.com /usr/local/go/src/
     cd /home/ubuntu
     chown -R ubuntu fabric-samples
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>Start to download platform binaries>>>>>>>>>>>>>>>>>>>>>>"
     cd /home/ubuntu/fabric-samples
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>Downloading platform binaries>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
     #curl -sSL https://goo.gl/eYdRbX | bash
     curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/master/scripts/bootstrap-1.0.0.sh | bash

     export VERSION=1.0.0
     export ARCH=$(echo "$(uname -s|tr '[:upper:]' '[:lower:]'|sed 's/mingw64_nt.*/windows/')-$(uname -m | sed 's/x86_64/amd64/g')" | awk '{print tolower($0)}')
     #Set MARCH variable i.e ppc64le,s390x,x86_64,i386
     export MARCH=`uname -m`
     #curl -sSL https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/${ARCH}-${VERSION}/hyperledger-fabric-${ARCH}-${VERSION}.tar.gz | tar xz

     cp ./bin/* /usr/local/go/bin
     echo ">>>>>>>>>>>>>>>>>>>>>>>>>install openssl>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
     apt-get -y install apache2 
     apt-get -y install openssl
     apt-get -y install libssl-dev
     apt-get -y install bless

     echo ">>>>>>>>>>>>>>>>>>>>>>>>>install xfce and virtualbox additions>>>>>>>>>>>>>>>>>>>>>>"
     apt-get install -y xfce4 virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11
     apt-get install -y xserver-xorg-legacy
     VBoxClient --clipboard
     VBoxClient --draganddrop
     VBoxClient --display
     VBoxClient --checkhostversion
     VBoxClient --seamless
     # Permit anyone to start the GUI
     sed -i 's/allowed_users=.*$/allowed_users=anybody/' /etc/X11/Xwrapper.config
     #startx
   SHELL
  #config.vm.provision :shell, path: "bootstrap.sh"
end
